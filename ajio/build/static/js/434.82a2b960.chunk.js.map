{"version":3,"file":"static/js/434.82a2b960.chunk.js","mappings":"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","sources":["components/MyOrdersComponentOne.js","components/MyOrdersComponent.js","redux/apis/loadCartApi.js","redux/actions/loadCartAction.js","redux/apis/loadWishlistApi.js","redux/actions/loadWishlistAction.js"],"sourcesContent":["import React from 'react'\r\nimport Controls from '../commons/Controls'\r\n\r\nconst MyOrdersComponentOne = ({orders,product,handleOrderDetails,handleNavigateToWishlist,statusMessages}) => {\r\n  return (\r\n    <>\r\n    <Controls.Grid item xs={12} sx={{ justifyContent: \"center\", textAlign: \"left\",  }}>\r\n                        {orders?.length > 0 ? (\r\n                            <>\r\n                                {orders?.map((item, index) => (\r\n                                    <Controls.Grid item xs={12} key={index}>\r\n\r\n                                        <Controls.Grid item my={2}>\r\n                                            <Controls.Typography variant='caption1' sx={{ color: \"gray\", textAlign: \"left\" }}>OrderId:{item.paymentDetails?.orderId} </Controls.Typography>\r\n                                        </Controls.Grid>\r\n                                        <Controls.Grid sx={{ border: \"1px solid lightgray\", }}>\r\n                                            {item?.cart?.products.map((prdt, innerIndex) => (\r\n                                                <>\r\n                                                    <Controls.Grid item key={innerIndex} sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", border: \"1px solid lightgray\", cursor: \"pointer\", \"&:hover\": { backgroundColor: \"#fafafa\" } }} onClick={() => handleOrderDetails(item?._id)}>\r\n                                                        <Controls.Grid item sx={{ dispaly: \"flex\", padding: 1.5, }}>\r\n                                                            <Controls.Grid item sx={{ display: \"flex\", alignItems: \"center\" }} gap={1}>\r\n                                                                <Controls.Grid item>\r\n                                                                    <Controls.Box\r\n                                                                        src={prdt.product.image}\r\n                                                                        width=\"100%\"\r\n                                                                        height=\"100%\"\r\n                                                                        component=\"img\"\r\n                                                                        sx={{ width: {xs:\"80px\",sm:\"120px\"}, height: {xs:\"100px\",sm:\"150px\"} }}\r\n                                                                    />\r\n                                                                </Controls.Grid>\r\n                                                                <Controls.Grid item sx={{ alignItems: \"center\" }}>\r\n                                                                    <Controls.Typography\r\n                                                                        variant=\"caption1\"\r\n                                                                        sx={{ fontWeight: \"bold\" ,color:prdt.productShippingStatus === \"Cancelled\" ? 'red' :\"black\"}}\r\n                                                                    >\r\n                                                                        {prdt.productShippingStatus}\r\n                                                                    </Controls.Typography><br />\r\n                                                                    <Controls.Typography\r\n                                                                        variant=\"caption1\"\r\n                                                                        sx={{ fontWeight: \"normal\" ,fontSize:{xs:\"12px\",sm:\"15px\"}}}\r\n                                                                    >\r\n                                                                        {statusMessages[prdt.productShippingStatus]}\r\n                                                                    </Controls.Typography>\r\n                                                                </Controls.Grid>\r\n                                                            </Controls.Grid>\r\n\r\n                                                        </Controls.Grid>\r\n                                                        <Controls.Grid item>\r\n                                                            <Controls.KeyboardArrowRightIcon sx={{ color: \"gray\", marginRight: 2 }} />\r\n                                                        </Controls.Grid>\r\n                                                    </Controls.Grid>\r\n                                                </>\r\n                                            ))}\r\n\r\n\r\n                                        </Controls.Grid>\r\n\r\n                                    </Controls.Grid>\r\n\r\n                                ))}\r\n                            </>\r\n\r\n                        ) : product?.length > 0 ? (\r\n                            <>\r\n                                <Controls.Grid item xs={12} sx={{ justifyContent: 'center', }}>\r\n                                    <Controls.Grid item sx={{ textAlign: \"center\" }}>\r\n                                        <Controls.Typography variant='caption1' sx={{ fontWeight: \"bold\" ,fontSize:\"18px\"}}>No orders placed</Controls.Typography>\r\n                                    </Controls.Grid>\r\n                                    <Controls.Grid item sx={{ textAlign: \"center\" }}>\r\n                                        <Controls.Typography variant='caption1' sx={{ fontWeight: \"normal\" ,color:\"gray\"}}>You have items in your wishlist waiting to be yours!</Controls.Typography>\r\n                                    </Controls.Grid>\r\n                                    <Controls.Grid\r\n                                        container\r\n                                        sx={{\r\n                                            display: \"flex\",\r\n                                            flexWrap: \"wrap\",\r\n                                            gap: \"16px\",\r\n                                            justifyContent: \"center\"\r\n                                        }}\r\n                                    >\r\n                                        {product.map((item, index) => (\r\n                                            <Controls.Grid\r\n                                                item\r\n                                                key={index}\r\n                                                sx={{ display: \"flex\" }}my={1}\r\n                                            >\r\n                                                <Controls.Box\r\n                                                    sx={{\r\n                                                        position: \"relative\",\r\n                                                        width: \"80px\",\r\n                                                        height: \"100px\",\r\n                                                        boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Controls.CardMedia\r\n                                                        component=\"img\"\r\n                                                        src={item.image}\r\n                                                        sx={{\r\n                                                            width: \"100%\",\r\n                                                            height: \"100%\",\r\n                                                            objectFit: \"cover\",\r\n                                                        }}\r\n                                                    />\r\n                                                </Controls.Box>\r\n                                            </Controls.Grid>\r\n                                        ))}\r\n                                    </Controls.Grid>\r\n                                    <Controls.Grid item sx={{display:\"block\",margin:\"auto\",textAlign:\"center\",cursor:\"pointer\"}} onClick={handleNavigateToWishlist}>\r\n                                        <Controls.Button variant='contained'>ADD FROM WISHLIST</Controls.Button>\r\n                                    </Controls.Grid>\r\n\r\n                                </Controls.Grid>\r\n                            </>\r\n                        ) : (\r\n\r\n                            <>\r\n                                <Controls.Grid item>\r\n                                    <Controls.Typography variant='caption1' sx={{ fontWeight: \"bold\" }}>\r\n                                        No Orders Placed\r\n                                    </Controls.Typography>\r\n                                </Controls.Grid>\r\n                            </>\r\n                        )}\r\n                    </Controls.Grid>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default MyOrdersComponentOne","import React, { useEffect, useState } from 'react'\r\nimport Controls from '../commons/Controls'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getToken, getUserId } from './GlobalFunction';\r\nimport { loadOrderInitiate } from '../redux/actions/loadOrderAction';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { loadWishlistInitiate } from '../redux/actions/loadWishlistAction';\r\nimport { loadCartInitiate } from '../redux/actions/loadCartAction';\r\nimport MyOrdersComponentOne from './MyOrdersComponentOne';\r\n\r\nconst MyOrdersComponent = () => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [selectedOption, setSelectedOption] = useState(\"Last  6 months\");\r\n    const [orders, setOrders] = useState([])\r\n    const [product, setProduct] = useState([]);\r\n    const [cartProduct, setCartProduct] = useState([]);\r\n    const dispatch = useDispatch()\r\n    const userId = getUserId()\r\n    const token = getToken()\r\n    const navigate = useNavigate()\r\n\r\n    const ordersData = useSelector((state) => state.loadOrder.data || {})\r\n    console.log(\"ordersData\", ordersData)\r\n\r\n    const wishlistData = useSelector((state) => state.loadwishlist.data);\r\n    const cartData = useSelector((state) => state.loadcartproducts.data || [])\r\n\r\n    useEffect(() => {\r\n        const fetchWishlist = async () => {\r\n            if(userId){\r\n            dispatch(loadWishlistInitiate(userId));\r\n            }\r\n        };\r\n        fetchWishlist();\r\n    }, [dispatch, userId]);\r\n\r\n    useEffect(() => {\r\n        if (wishlistData && wishlistData.data) {\r\n            const data = wishlistData.data?.wishlistData;\r\n            if (data && data.products) {\r\n                setProduct(data.products);\r\n                console.log(\"product\", data.products)\r\n            }\r\n        }\r\n    }, [wishlistData]);\r\n\r\n    useEffect(() => {\r\n        const fetchOrders = async () => {\r\n            await dispatch(loadOrderInitiate(userId))\r\n        }\r\n        fetchOrders()\r\n\r\n    }, [userId,dispatch])\r\n    useEffect(() => {\r\n        if (ordersData?.data) {\r\n            const data = ordersData?.data?.orderDetails || []\r\n            setOrders(data)\r\n        }\r\n\r\n    }, [ordersData])\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchCart = async () => {\r\n            if(userId){\r\n            dispatch(loadCartInitiate(token, userId))\r\n            }\r\n        }\r\n        fetchCart()\r\n    }, [dispatch,token, userId])\r\n\r\n    useEffect(() => {\r\n        if (cartData && cartData.data) {\r\n            const data = cartData.data.cartDetails;\r\n            if (data && data.products) {\r\n                setCartProduct(data.products);\r\n                console.log(\"productsData\", data.products);\r\n            }\r\n        }\r\n    }, [cartData]);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuItemClick = (option) => {\r\n        setSelectedOption(option);\r\n        handleClose();\r\n    };\r\n    const handleOrderDetails = (id) => {\r\n        navigate('/orderdetails', { state: { id: id } })\r\n         \r\n    };\r\n\r\n\r\n    const handleNavigateToWishlist = () => {\r\n        navigate('/wishlist')\r\n    }\r\n\r\n        const statusMessages = {\r\n            'Confirmed': 'Your Order was Confirmed',\r\n            'Packed': 'Your order has been Packed.',\r\n            'Shipped': 'Your order is on the way!',\r\n            'Out-for-delivery': 'Your order is out for delivery.',\r\n            'Delivered': 'Your order has been delivered.',\r\n            'Cancelled': 'Your Order was Cancelled',\r\n            'Arriving':'Your order was Arriving '\r\n    \r\n    \r\n        };\r\n\r\n    return (\r\n        <>\r\n            <Controls.Grid container justifyContent=\"center\">\r\n                <Controls.Grid item xs={12} sx={{ justifyContent: \"center\", backgroundColor: \"white\", boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\", height: \"auto\" }} p={2}>\r\n                    <Controls.Grid item sx={{ justifyContent: \"center\", margin: \"auto\", textAlign: \"center\" }}>\r\n                        <Controls.Typography variant='caption1' sx={{ fontSize: \"25px\", color: \"#323232\", fontWeight: \"bold\" }}>My Orders</Controls.Typography>\r\n                    </Controls.Grid>\r\n                    <Controls.Grid item xs={8} sm={6} md={4}lg={2} my={2}>\r\n                        <Controls.Grid\r\n                            item\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                alignItems: \"center\",\r\n                                border: \"1px solid black\",\r\n                                padding: 1,\r\n                                fontWeight: \"bold\"\r\n                            }} onClick={handleClick}\r\n                        >\r\n                            <Controls.Typography\r\n                                variant=\"caption1\"\r\n\r\n                                sx={{ padding: { xs: 0, sm: 0.5 }, fontSize: { xs: \"14px\" }, color: \"#333333\" }}\r\n                            >\r\n                                {selectedOption}\r\n                            </Controls.Typography>\r\n                            <Controls.ExpandMoreIcon sx={{ color: \"black\", marginLeft: 1, fontSize: { xs: \"20px\" }, padding: 0, fontWeight: \"bold\" }} />\r\n                        </Controls.Grid>\r\n\r\n                        <Controls.Menu\r\n                            id=\"basic-menu\"\r\n                            anchorEl={anchorEl}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            MenuListProps={{\r\n                                \"aria-labelledby\": \"basic-button\",\r\n                            }}\r\n                            PaperProps={{\r\n                                sx: {\r\n                                    width: \"150px\",  \r\n                                },\r\n                            }}\r\n                            sx={{\r\n                                marginTop: { xs: \"0px\" },\r\n                            }}\r\n                        >\r\n                            {[\"Last 6 months\", \"2024\", \"2023\", \"2022\", \"2021\"].map((option, index) => (\r\n                                <>\r\n                                    <Controls.MenuItem\r\n                                        key={index}\r\n                                        onClick={() => handleMenuItemClick(option)}\r\n                                        sx={{\r\n                                            fontSize: \"12px\",\r\n                                            fontWeight: selectedOption === option ? \"bold\" : \"normal\",\r\n                                            color: selectedOption === option ? \"primary.main\" : \"inherit\", \r\n                                        }}\r\n                                    >\r\n                                        {option}\r\n                                    </Controls.MenuItem>\r\n                                    {index !== 4 && <Controls.Divider />}\r\n                                </>\r\n                            ))}\r\n                        </Controls.Menu>\r\n\r\n                    </Controls.Grid>\r\n\r\n                    <MyOrdersComponentOne  orders={orders} product={product}  handleOrderDetails={handleOrderDetails} handleNavigateToWishlist={handleNavigateToWishlist} statusMessages={statusMessages}/>\r\n                </Controls.Grid>\r\n            </Controls.Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyOrdersComponent","import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"cart\";\r\nexport const loadCartApi = async (token, userId) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n\r\n      const response = await api.get(`${endPoints}/${userId}`,{\r\n        headers:{\r\n          authorization:`Bearer ${token}`,\r\n        }\r\n      });\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in loadCartApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { loadCartApi } from '../apis/loadCartApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const loadCartStart= () => ({\r\ntype:types.CART_LOAD_START\r\n})\r\n\r\nexport const loadCartSuccess = (data) => (\r\n    {\r\n    type:types.CART_LOAD_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const loadCartError = (error) => (\r\n    {\r\n    type:types.CART_LOAD_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const loadCartInitiate = (token,userId) => {\r\n    return async (dispatch)=>{\r\n        dispatch(loadCartStart())\r\n        try {\r\n          const loadCartdata = await loadCartApi(token,userId)\r\n          dispatch(loadCartSuccess(loadCartdata))\r\n  \r\n        } catch (err) {\r\n          console.log(\"error\",err)\r\n          dispatch(loadCartError(err))\r\n          toast.error(\"getting products data failed\")\r\n  \r\n        }\r\n    }\r\n}","import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"wishlist\";\r\nexport const loadWishlistApi = async (userId) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n  \r\n      const response = await api.get(`${endPoints}/${userId}`\r\n      );\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in loadCartApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { loadWishlistApi } from '../apis/loadWishlistApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const loadWishlistStart= () => ({\r\ntype:types.WISHLIST_LOAD_START\r\n})\r\n\r\nexport const loadWishlistSuccess = (data) => (\r\n    {\r\n    type:types.WISHLIST_LOAD_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const loadWishlistError = (error) => (\r\n    {\r\n    type:types.WISHLIST_LOAD_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const loadWishlistInitiate = (userId) => {\r\n    return async (dispatch)=>{\r\n        dispatch(loadWishlistStart())\r\n        try {\r\n          const loadWishlistdata = await loadWishlistApi(userId)\r\n          dispatch(loadWishlistSuccess(loadWishlistdata))\r\n  \r\n        } catch (err) {\r\n          console.log(\"error\",err)\r\n          dispatch(loadWishlistError(err))\r\n          toast.error(\"getting wishlist data failed\")\r\n  \r\n        }\r\n    }\r\n}"],"names":["_ref","orders","product","handleOrderDetails","handleNavigateToWishlist","statusMessages","_jsx","_Fragment","children","Controls","Grid","item","xs","sx","justifyContent","textAlign","length","map","index","_item$paymentDetails","_item$cart","_jsxs","my","Typography","variant","color","paymentDetails","orderId","border","cart","products","prdt","innerIndex","display","alignItems","cursor","backgroundColor","onClick","_id","dispaly","padding","gap","Box","src","image","width","height","component","sm","fontWeight","productShippingStatus","fontSize","KeyboardArrowRightIcon","marginRight","container","flexWrap","position","boxShadow","CardMedia","objectFit","margin","Button","MyOrdersComponent","anchorEl","setAnchorEl","useState","selectedOption","setSelectedOption","setOrders","setProduct","cartProduct","setCartProduct","dispatch","useDispatch","userId","getUserId","token","getToken","navigate","useNavigate","ordersData","useSelector","state","loadOrder","data","console","log","wishlistData","loadwishlist","cartData","loadcartproducts","useEffect","async","loadWishlistInitiate","fetchWishlist","_wishlistData$data","loadOrderInitiate","fetchOrders","_ordersData$data","orderDetails","loadCartInitiate","fetchCart","cartDetails","open","Boolean","handleClose","p","md","lg","event","currentTarget","ExpandMoreIcon","marginLeft","Menu","id","onClose","MenuListProps","PaperProps","marginTop","option","MenuItem","handleMenuItemClick","Divider","MyOrdersComponentOne","api","API","type","types","loadCartdata","Promise","resolve","reject","get","concat","headers","authorization","error","loadCartApi","payload","err","toast","loadWishlistdata","loadWishlistApi"],"sourceRoot":""}