{"version":3,"file":"static/js/252.2fe68952.chunk.js","mappings":"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","sources":["redux/apis/adminLoginApi.js","redux/actions/adminLoginAction.js","components/AdminLoginComponent.js"],"sourcesContent":["import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"admin\";\r\nexport const adminLoginApi = async (user) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n\r\n      const response = await api.post(`${endPoints}`,user);\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in adminLoginApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { adminLoginApi } from '../apis/adminLoginApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const adminLoginStart= () => ({\r\ntype:types.ADMIN_LOGIN_START\r\n})\r\n\r\nexport const adminLoginSuccess = (data) => (\r\n    {\r\n    type:types.ADMIN_LOGIN_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const adminLoginError = (error) => (\r\n    {\r\n    type:types.ADMIN_LOGIN_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const adminLoginInitiate = (user) => {\r\n    return async (dispatch)=>{\r\n        dispatch(adminLoginStart())\r\n        try {\r\n          const adminlogindata = await adminLoginApi(user)\r\n          dispatch(adminLoginSuccess(adminlogindata))\r\n  \r\n        } catch (err) {\r\n          dispatch(adminLoginError(err))\r\n          toast.error(\"admin & Password authentication failed\")\r\n  \r\n        }\r\n    }\r\n}","import React from 'react'\r\nimport Controls from '../commons/Controls'\r\nimport { useEffect } from 'react';\r\nimport { Formik, Form, Field } from 'formik'; \r\nimport * as Yup from 'yup';\r\nimport { adminLoginInitiate } from '../redux/actions/adminLoginAction';\r\nimport {useSelector , useDispatch} from 'react-redux' \r\nimport theme from '../utilities/theme';\r\n\r\nconst style = {\r\n    position: 'absolute',\r\n    top: '50%',\r\n    left: '50%',\r\n    transform: 'translate(-50%, -50%)',\r\n    width: 400,\r\n    bgcolor:'#EAE2D1', \r\n    border: `3px solid ${theme.palette.one.text2}`,\r\n    boxShadow: 24,\r\n    p: 4,\r\n    borderRadius:\"20px\",\r\n    outline:\"none\"\r\n  };\r\n\r\nconst AdminLoginComponent = () => {\r\n    const [open, setOpen] = React.useState(false); \r\n  const dispatch = useDispatch()\r\n\r\n  const adminData = useSelector((state)=>state.adminloginreducer.data)\r\n  console.log(\"adminData\",adminData)\r\n\r\n \r\n\r\nuseEffect(() => {\r\n  const allowedOrigins = process.env.NODE_ENV === 'production' \r\n  ? 'https://ajio-2.onrender.com' \r\n  : 'http://localhost:5051';\r\n  const admin = adminData?.data?.admin\r\n \r\n  const role = admin?.role\r\n  console.log(\"role\",role)\r\n  if (role === \"admin\") {\r\n        window.location.href = `${allowedOrigins}/adminpanel`;\r\n      }  \r\n     \r\n}, [adminData]);\r\n\r\n    const initialValues = {\r\n        email: '', password: \"\",\r\n      };\r\n    \r\n      const validationSchema = Yup.object().shape({\r\n        email: Yup.string().email('Invalid email format').required('Email is required'),\r\n        password: Yup.string().required(\"password is required\"),\r\n      });\r\n    \r\n      const onSubmit = async (values, actions) => {\r\n        console.log(\"Form Values:\", values);\r\n        actions.resetForm();\r\n        handleClose()\r\n        handleSignin(values)\r\n    \r\n      }\r\n    useEffect(()=>{\r\n        handleOpen()\r\n    })\r\n\r\n    const handleSignin = async (user) => {\r\n      console.log(\"user\",user)\r\n      await dispatch(adminLoginInitiate(user))\r\n      \r\n      }\r\n    \r\n   \r\n  const handleOpen = () => setOpen(true);\r\n  const handleClose = () => setOpen(false);\r\n  return (\r\n    <>\r\n    <Controls.Grid container justifyContent=\"center\">\r\n        <Controls.Grid item>\r\n      <Controls.Modal\r\n        open={open}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-modal-title\"\r\n        aria-describedby=\"modal-modal-description\" \r\n      >\r\n        <Controls.Box sx={style}>\r\n        <Formik\r\n              initialValues={initialValues}\r\n              validationSchema={validationSchema}\r\n              onSubmit={onSubmit}\r\n            >\r\n              {({ errors, touched, isSubmitting }) => (\r\n                <Form>\r\n                  <Controls.Grid container spacing={2}>\r\n                    <Controls.Grid item xs={12} textAlign=\"center\" mb={4}>\r\n                      <Controls.Typography\r\n                        variant=\"h2\"\r\n                        sx={{\r\n                          fontWeight: \"bold\",\r\n                          fontSize: { xs: \"15px\", md: \"20px\", xl: \"25px\" },\r\n                          color:theme.palette.one.text2\r\n                        }}\r\n                      >\r\n                        Welcome Admin !!\r\n                      </Controls.Typography>\r\n                    </Controls.Grid>\r\n\r\n                    <Controls.Grid item xs={12}>\r\n                      <Field\r\n                        name=\"email\"\r\n                        as={Controls.TextField}\r\n                        label=\"Email\"\r\n                        placeholder=\"Enter Email\"\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        autoComplete=\"off\"\r\n                        error={touched.email && Boolean(errors.email)}\r\n                        helperText={touched.email && errors.email}\r\n                      />\r\n                    </Controls.Grid>\r\n\r\n                    <Controls.Grid item xs={12}>\r\n                      <Field\r\n                        name=\"password\"\r\n                        as={Controls.TextField}\r\n                        label=\"Password\"\r\n                        placeholder=\"Password\"\r\n                        size=\"small\"\r\n                        type=\"password\"\r\n                        fullWidth\r\n                        autoComplete=\"off\"\r\n                        error={touched.password && Boolean(errors.password)}\r\n                        helperText={touched.password && errors.password}\r\n                      />\r\n                    </Controls.Grid>\r\n\r\n                    <Controls.Grid item xs={12} mt={2}>\r\n                      <Controls.Button\r\n                        variant=\"contained\"\r\n                        disabled={isSubmitting}\r\n                        type=\"submit\"\r\n                        sx={{ \r\n                          textTransform: \"initial\",\r\n                        }} \r\n                      >\r\n                        Signin\r\n                      </Controls.Button>\r\n                    </Controls.Grid>\r\n\r\n                     \r\n                  </Controls.Grid>\r\n                </Form>\r\n              )}\r\n            </Formik>\r\n        </Controls.Box>\r\n      </Controls.Modal>\r\n        </Controls.Grid>\r\n     </Controls.Grid>   \r\n         </>\r\n  )\r\n}\r\n\r\nexport default AdminLoginComponent"],"names":["api","API","adminLoginInitiate","user","async","dispatch","type","types","adminlogindata","Promise","resolve","reject","post","concat","error","console","adminLoginApi","data","payload","err","toast","style","position","top","left","transform","width","bgcolor","border","theme","palette","one","text2","boxShadow","p","borderRadius","outline","AdminLoginComponent","open","setOpen","React","useDispatch","adminData","useSelector","state","adminloginreducer","log","useEffect","_adminData$data","admin","role","window","location","href","validationSchema","Yup","shape","email","required","password","handleOpen","handleSignin","handleClose","_jsx","_Fragment","children","Controls","Grid","container","justifyContent","item","Modal","onClose","Box","sx","Formik","initialValues","onSubmit","values","actions","resetForm","_ref","errors","touched","isSubmitting","Form","_jsxs","spacing","xs","textAlign","mb","Typography","variant","fontWeight","fontSize","md","xl","color","Field","name","as","TextField","label","placeholder","size","fullWidth","autoComplete","Boolean","helperText","mt","Button","disabled","textTransform"],"sourceRoot":""}