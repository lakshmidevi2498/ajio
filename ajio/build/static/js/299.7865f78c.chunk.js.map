{"version":3,"file":"static/js/299.7865f78c.chunk.js","mappings":"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","sources":["components/MyOrdersComponent.js","redux/apis/loadCartApi.js","redux/actions/loadCartAction.js","redux/apis/loadWishlistApi.js","redux/actions/loadWishlistAction.js"],"sourcesContent":["import React, { useEffect, useState } from 'react'\r\nimport Controls from '../commons/Controls'\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { getToken, getUserId } from './GlobalFunction';\r\nimport { loadOrderInitiate } from '../redux/actions/loadOrderAction';\r\nimport { useNavigate } from 'react-router-dom'\r\nimport { loadWishlistInitiate } from '../redux/actions/loadWishlistAction';\r\nimport { loadCartInitiate } from '../redux/actions/loadCartAction';\r\n\r\nconst MyOrdersComponent = () => {\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [selectedOption, setSelectedOption] = useState(\"Last  6 months\");\r\n    const [orders, setOrders] = useState([])\r\n    const [product, setProduct] = useState([]);\r\n    const [cartProduct, setCartProduct] = useState([]);\r\n    const dispatch = useDispatch()\r\n    const userId = getUserId()\r\n    const token = getToken()\r\n    const navigate = useNavigate()\r\n\r\n    const ordersData = useSelector((state) => state.loadOrder.data || {})\r\n    console.log(\"ordersData\", ordersData)\r\n\r\n    const wishlistData = useSelector((state) => state.loadwishlist.data);\r\n    const cartData = useSelector((state) => state.loadcartproducts.data || [])\r\n\r\n    useEffect(() => {\r\n        const fetchWishlist = async () => {\r\n            if(userId){\r\n            dispatch(loadWishlistInitiate(userId));\r\n            }\r\n        };\r\n        fetchWishlist();\r\n    }, [dispatch, userId]);\r\n\r\n    useEffect(() => {\r\n        if (wishlistData && wishlistData.data) {\r\n            const data = wishlistData.data?.wishlistData;\r\n            if (data && data.products) {\r\n                setProduct(data.products);\r\n                console.log(\"product\", data.products)\r\n            }\r\n        }\r\n    }, [wishlistData]);\r\n\r\n    useEffect(() => {\r\n        const fetchOrders = async () => {\r\n            await dispatch(loadOrderInitiate(userId))\r\n        }\r\n        fetchOrders()\r\n\r\n    }, [])\r\n    useEffect(() => {\r\n        if (ordersData?.data) {\r\n            const data = ordersData?.data?.orderDetails || []\r\n            setOrders(data)\r\n        }\r\n\r\n    }, [ordersData])\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchCart = async () => {\r\n            if(userId){\r\n            dispatch(loadCartInitiate(token, userId))\r\n            }\r\n        }\r\n        fetchCart()\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (cartData && cartData.data) {\r\n            const data = cartData.data.cartDetails;\r\n            if (data && data.products) {\r\n                setCartProduct(data.products);\r\n                console.log(\"productsData\", data.products);\r\n            }\r\n        }\r\n    }, [cartData]);\r\n    const open = Boolean(anchorEl);\r\n\r\n    const handleClick = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n    const handleClose = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    const handleMenuItemClick = (option) => {\r\n        setSelectedOption(option);\r\n        handleClose();\r\n    };\r\n    const handleOrderDetails = (id) => {\r\n        navigate('/orderdetails', { state: { id: id } })\r\n         \r\n    };\r\n\r\n\r\n    const handleNavigateToWishlist = () => {\r\n        navigate('/wishlist')\r\n    }\r\n\r\n        const statusMessages = {\r\n            'Confirmed': 'Your Order was Confirmed',\r\n            'Packed': 'Your order has been Packed.',\r\n            'Shipped': 'Your order is on the way!',\r\n            'Out_for_delivery': 'Your order is out for delivery.',\r\n            'Delivered': 'Your order has been delivered.',\r\n            'Cancelled': 'Your Order was Cancelled',\r\n            'Arriving':'Your order was Arriving '\r\n    \r\n    \r\n        };\r\n\r\n    return (\r\n        <>\r\n            <Controls.Grid container justifyContent=\"center\">\r\n                <Controls.Grid item xs={12} sx={{ justifyContent: \"center\", backgroundColor: \"white\", boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\", height: \"auto\" }} p={2}>\r\n                    <Controls.Grid item sx={{ justifyContent: \"center\", margin: \"auto\", textAlign: \"center\" }}>\r\n                        <Controls.Typography variant='caption1' sx={{ fontSize: \"25px\", color: \"#323232\", fontWeight: \"bold\" }}>My Orders</Controls.Typography>\r\n                    </Controls.Grid>\r\n                    <Controls.Grid item xs={8} sm={6} md={4}lg={2} my={2}>\r\n                        <Controls.Grid\r\n                            item\r\n                            sx={{\r\n                                display: \"flex\",\r\n                                justifyContent: \"space-between\",\r\n                                alignItems: \"center\",\r\n                                border: \"1px solid black\",\r\n                                padding: 1,\r\n                                fontWeight: \"bold\"\r\n                            }} onClick={handleClick}\r\n                        >\r\n                            <Controls.Typography\r\n                                variant=\"caption1\"\r\n\r\n                                sx={{ padding: { xs: 0, sm: 0.5 }, fontSize: { xs: \"14px\" }, color: \"#333333\" }}\r\n                            >\r\n                                {selectedOption}\r\n                            </Controls.Typography>\r\n                            <Controls.ExpandMoreIcon sx={{ color: \"black\", marginLeft: 1, fontSize: { xs: \"20px\" }, padding: 0, fontWeight: \"bold\" }} />\r\n                        </Controls.Grid>\r\n\r\n                        <Controls.Menu\r\n                            id=\"basic-menu\"\r\n                            anchorEl={anchorEl}\r\n                            open={open}\r\n                            onClose={handleClose}\r\n                            MenuListProps={{\r\n                                \"aria-labelledby\": \"basic-button\",\r\n                            }}\r\n                            PaperProps={{\r\n                                sx: {\r\n                                    width: \"150px\",  \r\n                                },\r\n                            }}\r\n                            sx={{\r\n                                marginTop: { xs: \"0px\" },\r\n                            }}\r\n                        >\r\n                            {[\"Last 6 months\", \"2024\", \"2023\", \"2022\", \"2021\"].map((option, index) => (\r\n                                <>\r\n                                    <Controls.MenuItem\r\n                                        key={index}\r\n                                        onClick={() => handleMenuItemClick(option)}\r\n                                        sx={{\r\n                                            fontSize: \"12px\",\r\n                                            fontWeight: selectedOption === option ? \"bold\" : \"normal\",\r\n                                            color: selectedOption === option ? \"primary.main\" : \"inherit\", \r\n                                        }}\r\n                                    >\r\n                                        {option}\r\n                                    </Controls.MenuItem>\r\n                                    {index !== 4 && <Controls.Divider />}\r\n                                </>\r\n                            ))}\r\n                        </Controls.Menu>\r\n\r\n                    </Controls.Grid>\r\n\r\n                    <Controls.Grid item xs={12} sx={{ justifyContent: \"center\", textAlign: \"left\",  }}>\r\n                        {orders?.length > 0 ? (\r\n                            <>\r\n                                {orders?.map((item, index) => (\r\n                                    <Controls.Grid item xs={12} key={index}>\r\n\r\n                                        <Controls.Grid item my={2}>\r\n                                            <Controls.Typography variant='caption1' sx={{ color: \"gray\", textAlign: \"left\" }}>OrderId:{item.paymentDetails?.orderId} </Controls.Typography>\r\n                                        </Controls.Grid>\r\n                                        <Controls.Grid sx={{ border: \"1px solid lightgray\", }}>\r\n                                            {item?.cart?.products.map((prdt, innerIndex) => (\r\n                                                <>\r\n                                                    <Controls.Grid item key={innerIndex} sx={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", border: \"1px solid lightgray\", cursor: \"pointer\", \"&:hover\": { backgroundColor: \"#fafafa\" } }} onClick={() => handleOrderDetails(item?._id)}>\r\n                                                        <Controls.Grid item sx={{ dispaly: \"flex\", padding: 1.5, }}>\r\n                                                            <Controls.Grid item sx={{ display: \"flex\", alignItems: \"center\" }} gap={1}>\r\n                                                                <Controls.Grid item>\r\n                                                                    <Controls.Box\r\n                                                                        src={prdt.product.image}\r\n                                                                        width=\"100%\"\r\n                                                                        height=\"100%\"\r\n                                                                        component=\"img\"\r\n                                                                        sx={{ width: {xs:\"80px\",sm:\"120px\"}, height: {xs:\"100px\",sm:\"150px\"} }}\r\n                                                                    />\r\n                                                                </Controls.Grid>\r\n                                                                <Controls.Grid item sx={{ alignItems: \"center\" }}>\r\n                                                                    <Controls.Typography\r\n                                                                        variant=\"caption1\"\r\n                                                                        sx={{ fontWeight: \"bold\" ,color:prdt.productShippingStatus === \"Cancelled\" ? 'red' :\"black\"}}\r\n                                                                    >\r\n                                                                        {prdt.productShippingStatus}\r\n                                                                    </Controls.Typography><br />\r\n                                                                    <Controls.Typography\r\n                                                                        variant=\"caption1\"\r\n                                                                        sx={{ fontWeight: \"normal\" ,fontSize:{xs:\"12px\",sm:\"15px\"}}}\r\n                                                                    >\r\n                                                                        {statusMessages[prdt.productShippingStatus]}\r\n                                                                    </Controls.Typography>\r\n                                                                </Controls.Grid>\r\n                                                            </Controls.Grid>\r\n\r\n                                                        </Controls.Grid>\r\n                                                        <Controls.Grid item>\r\n                                                            <Controls.KeyboardArrowRightIcon sx={{ color: \"gray\", marginRight: 2 }} />\r\n                                                        </Controls.Grid>\r\n                                                    </Controls.Grid>\r\n                                                </>\r\n                                            ))}\r\n\r\n\r\n                                        </Controls.Grid>\r\n\r\n                                    </Controls.Grid>\r\n\r\n                                ))}\r\n                            </>\r\n\r\n                        ) : product?.length > 0 ? (\r\n                            <>\r\n                                <Controls.Grid item xs={12} sx={{ justifyContent: 'center', }}>\r\n                                    <Controls.Grid item sx={{ textAlign: \"center\" }}>\r\n                                        <Controls.Typography variant='caption1' sx={{ fontWeight: \"bold\" ,fontSize:\"18px\"}}>No orders placed</Controls.Typography>\r\n                                    </Controls.Grid>\r\n                                    <Controls.Grid item sx={{ textAlign: \"center\" }}>\r\n                                        <Controls.Typography variant='caption1' sx={{ fontWeight: \"normal\" ,color:\"gray\"}}>You have items in your wishlist waiting to be yours!</Controls.Typography>\r\n                                    </Controls.Grid>\r\n                                    <Controls.Grid\r\n                                        container\r\n                                        sx={{\r\n                                            display: \"flex\",\r\n                                            flexWrap: \"wrap\",\r\n                                            gap: \"16px\",\r\n                                            justifyContent: \"center\"\r\n                                        }}\r\n                                    >\r\n                                        {product.map((item, index) => (\r\n                                            <Controls.Grid\r\n                                                item\r\n                                                key={index}\r\n                                                sx={{ display: \"flex\" }}my={1}\r\n                                            >\r\n                                                <Controls.Box\r\n                                                    sx={{\r\n                                                        position: \"relative\",\r\n                                                        width: \"80px\",\r\n                                                        height: \"100px\",\r\n                                                        boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\",\r\n                                                    }}\r\n                                                >\r\n                                                    <Controls.CardMedia\r\n                                                        component=\"img\"\r\n                                                        src={item.image}\r\n                                                        sx={{\r\n                                                            width: \"100%\",\r\n                                                            height: \"100%\",\r\n                                                            objectFit: \"cover\",\r\n                                                        }}\r\n                                                    />\r\n                                                </Controls.Box>\r\n                                            </Controls.Grid>\r\n                                        ))}\r\n                                    </Controls.Grid>\r\n                                    <Controls.Grid item sx={{display:\"block\",margin:\"auto\",textAlign:\"center\",cursor:\"pointer\"}} onClick={handleNavigateToWishlist}>\r\n                                        <Controls.Button variant='contained'>ADD FROM WISHLIST</Controls.Button>\r\n                                    </Controls.Grid>\r\n\r\n                                </Controls.Grid>\r\n                            </>\r\n                        ) : (\r\n\r\n                            <>\r\n                                <Controls.Grid item>\r\n                                    <Controls.Typography variant='caption1' sx={{ fontWeight: \"bold\" }}>\r\n                                        No Orders Placed\r\n                                    </Controls.Typography>\r\n                                </Controls.Grid>\r\n                            </>\r\n                        )}\r\n                    </Controls.Grid>\r\n                </Controls.Grid>\r\n            </Controls.Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyOrdersComponent","import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"cart\";\r\nexport const loadCartApi = async (token, userId) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n\r\n      const response = await api.get(`${endPoints}/${userId}`,{\r\n        headers:{\r\n          authorization:`Bearer ${token}`,\r\n        }\r\n      });\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in loadCartApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { loadCartApi } from '../apis/loadCartApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const loadCartStart= () => ({\r\ntype:types.CART_LOAD_START\r\n})\r\n\r\nexport const loadCartSuccess = (data) => (\r\n    {\r\n    type:types.CART_LOAD_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const loadCartError = (error) => (\r\n    {\r\n    type:types.CART_LOAD_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const loadCartInitiate = (token,userId) => {\r\n    return async (dispatch)=>{\r\n        dispatch(loadCartStart())\r\n        try {\r\n          const loadCartdata = await loadCartApi(token,userId)\r\n          dispatch(loadCartSuccess(loadCartdata))\r\n  \r\n        } catch (err) {\r\n          console.log(\"error\",err)\r\n          dispatch(loadCartError(err))\r\n          toast.error(\"getting products data failed\")\r\n  \r\n        }\r\n    }\r\n}","import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"wishlist\";\r\nexport const loadWishlistApi = async (userId) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n  \r\n      const response = await api.get(`${endPoints}/${userId}`\r\n      );\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in loadCartApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { loadWishlistApi } from '../apis/loadWishlistApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const loadWishlistStart= () => ({\r\ntype:types.WISHLIST_LOAD_START\r\n})\r\n\r\nexport const loadWishlistSuccess = (data) => (\r\n    {\r\n    type:types.WISHLIST_LOAD_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const loadWishlistError = (error) => (\r\n    {\r\n    type:types.WISHLIST_LOAD_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const loadWishlistInitiate = (userId) => {\r\n    return async (dispatch)=>{\r\n        dispatch(loadWishlistStart())\r\n        try {\r\n          const loadWishlistdata = await loadWishlistApi(userId)\r\n          dispatch(loadWishlistSuccess(loadWishlistdata))\r\n  \r\n        } catch (err) {\r\n          console.log(\"error\",err)\r\n          dispatch(loadWishlistError(err))\r\n          toast.error(\"getting wishlist data failed\")\r\n  \r\n        }\r\n    }\r\n}"],"names":["MyOrdersComponent","anchorEl","setAnchorEl","useState","selectedOption","setSelectedOption","orders","setOrders","product","setProduct","cartProduct","setCartProduct","dispatch","useDispatch","userId","getUserId","token","getToken","navigate","useNavigate","ordersData","useSelector","state","loadOrder","data","console","log","wishlistData","loadwishlist","cartData","loadcartproducts","useEffect","async","loadWishlistInitiate","fetchWishlist","_wishlistData$data","products","loadOrderInitiate","fetchOrders","_ordersData$data","orderDetails","loadCartInitiate","fetchCart","cartDetails","open","Boolean","handleClose","statusMessages","_jsx","_Fragment","children","Controls","Grid","container","justifyContent","_jsxs","item","xs","sx","backgroundColor","boxShadow","height","p","margin","textAlign","Typography","variant","fontSize","color","fontWeight","sm","md","lg","my","display","alignItems","border","padding","onClick","event","currentTarget","ExpandMoreIcon","marginLeft","Menu","id","onClose","MenuListProps","PaperProps","width","marginTop","map","option","index","MenuItem","handleMenuItemClick","Divider","length","_item$paymentDetails","_item$cart","paymentDetails","orderId","cart","prdt","innerIndex","cursor","handleOrderDetails","_id","dispaly","gap","Box","src","image","component","productShippingStatus","KeyboardArrowRightIcon","marginRight","flexWrap","position","CardMedia","objectFit","handleNavigateToWishlist","Button","api","API","type","types","loadCartdata","Promise","resolve","reject","get","concat","headers","authorization","error","loadCartApi","payload","err","toast","loadWishlistdata","loadWishlistApi"],"sourceRoot":""}