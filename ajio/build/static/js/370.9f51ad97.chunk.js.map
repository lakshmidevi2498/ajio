{"version":3,"file":"static/js/370.9f51ad97.chunk.js","mappings":"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","sources":["redux/apis/loadProfileApi.js","redux/actions/loadProfileAction.js","redux/apis/updateProfileApi.js","redux/actions/updateProfileAction.js","components/MyProfileDetailsComponent.js"],"sourcesContent":["import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"userdetails\";\r\nexport const loadProfileApi = async ( userId,token) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n\r\n      const response = await api.get(`${endPoints}/?userId=${userId}`, {\r\n        // headers: {\r\n        //   Authorization: `Bearer ${token}`,\r\n        // },\r\n      });\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in loadProfileApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { loadProfileApi } from '../apis/loadProfileApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const loadProfileStart= () => ({\r\ntype:types.PROFILE_LOAD_START\r\n})\r\n\r\nexport const loadProfileSuccess = (data) => (\r\n    {\r\n    type:types.PROFILE_LOAD_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const loadProfileError = (error) => (\r\n    {\r\n    type:types.PROFILE_LOAD_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const loadProfileInitiate = (userId,token) => {\r\n    return async (dispatch)=>{\r\n        dispatch(loadProfileStart())\r\n        try {\r\n          const loadProfiledata = await loadProfileApi(userId,token)\r\n            dispatch(loadProfileSuccess(loadProfiledata))\r\n  \r\n        } catch (err) {\r\n          console.log(\"error\",err)\r\n          dispatch(loadProfileError(err))\r\n          toast.error(\"getting products data failed\")\r\n  \r\n        }\r\n    }\r\n}","import API from \"../../API/API\";\r\nconst api = new API();\r\nconst endPoints = \"userdetails\";\r\nexport const updateProfileApi = async ( userId,values) => {\r\n  return new Promise(async (resolve, reject) => {\r\n    try {\r\n\r\n      const response = await api.put(`${endPoints}/?userId=${userId}`, {\r\n        values\r\n      });\r\n\r\n      resolve(response);\r\n   \r\n    } catch (error) {\r\n      console.error(\"Error in loadProfileApi:\", error);\r\n      reject(error);\r\n    }\r\n  });\r\n};\r\n","import * as types from './actionTypes'\r\nimport { updateProfileApi } from '../apis/updateProfileApi'\r\nimport { toast } from 'react-toastify';\r\n\r\nexport const updateProfileStart= () => ({\r\ntype:types.PROFILE_PUT_START\r\n})\r\n\r\nexport const updateProfileSuccess = (data) => (\r\n    {\r\n    type:types.PROFILE_PUT_SUCCESS,\r\n    payload:data\r\n})\r\n\r\nexport const updateProfileError = (error) => (\r\n    {\r\n    type:types.PROFILE_PUT_ERROR,\r\n    payload:error\r\n})\r\n\r\nexport const updateProfileInitiate = (userId,values) => {\r\n    return async (dispatch)=>{\r\n        dispatch(updateProfileStart())\r\n        try {\r\n          const updateProfiledata = await updateProfileApi(userId,values)\r\n          dispatch(updateProfileSuccess(updateProfiledata))\r\n  \r\n        } catch (err) {\r\n          console.log(\"error\",err)\r\n          dispatch(updateProfileError(err))\r\n          toast.error(\"getting products data failed\")\r\n  \r\n        }\r\n    }\r\n}","import React, { useEffect, useState } from 'react'\r\nimport Controls from '../commons/Controls' \r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { loadProfileInitiate } from '../redux/actions/loadProfileAction'\r\nimport { useFormik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { updateProfileInitiate } from '../redux/actions/updateProfileAction'\r\nimport { getToken, getUserId } from './GlobalFunction'\r\n\r\nconst MyProfileDetailsComponent = () => {\r\n    const dispatch = useDispatch()\r\n    const userData = useSelector((state) => state.loadprofile.data)\r\n    console.log(\"userData\", userData)\r\n    const updatedUser = useSelector((state)=>state.updateprofile.data || {})\r\n    console.log(\"updatedUser\", updatedUser)\r\n    const userId = getUserId()\r\n    const token = getToken()\r\n\r\n\r\n    useEffect(() => {\r\n\r\n        if(userId){\r\n        dispatch(loadProfileInitiate(userId,token))\r\n        }\r\n     \r\n    }, []);\r\n    const [details, setDetails] = useState({\r\n        fname: \"\",\r\n        lname: \"\",\r\n        sname: \"\",\r\n        email: \"\",\r\n        dob: \"\",\r\n        gender: \"\",\r\n        number: \"\",\r\n      });\r\n    \r\n     \r\n      useEffect(() => {\r\n        const User = userData?.data?.user;\r\n        if (User) {\r\n          let firstName = \"\";\r\n          let lastName = \"\";\r\n          let number=\"\";\r\n      \r\n          if (User.fname && User.lname) {\r\n            firstName = User.fname;\r\n            lastName = User.lname;\r\n          } else if (User.name) {\r\n            [firstName, lastName] = User.name.split(\" \");\r\n          }\r\n      if(User.phoneNumber){\r\n        number=User.phoneNumber\r\n      }\r\n          setDetails((prevDetails) => ({\r\n            ...prevDetails,\r\n            fname: firstName || \"\",\r\n            lname: lastName || \"\",\r\n            email: User.email || \"\",\r\n            dob: User.dob || \"\",\r\n            number: User.number || User.phoneNumber || \"\",\r\n            sname: User.sname || \"\",\r\n            gender: User.gender || \"\",\r\n          }));\r\n        }\r\n      }, [userData]);\r\n      \r\n    \r\n      // Formik setup\r\n      const formik = useFormik({\r\n        enableReinitialize: true, \r\n        initialValues: {\r\n          fname: details.fname || \"\",\r\n          lname: details.lname || \"\",\r\n          sname: details.sname || \"\",\r\n          email: details.email || \"\",\r\n          dob: details.dob || \"\",\r\n          gender: details.gender || \"\",\r\n          number: details.number || details.phoneNumber || \"\",\r\n        },\r\n        validationSchema: Yup.object({\r\n          fname: Yup.string().required(\"First name is required\"),\r\n          lname: Yup.string().required(\"Last name is required\"),\r\n          email: Yup.string().email(\"Invalid email address\").required(\"Email is required\"),\r\n          dob: Yup.date().required(\"Date of birth is required\"),\r\n          number: Yup.string()\r\n            .matches(/^\\d{10}$/, \"Telephone number must be exactly 10 digits\")\r\n            .required(\"Telephone number is required\"),\r\n        }),\r\n        onSubmit: async (values ,{resetForm}) => {\r\n          console.log(\"Submitting to DB\", values ,userId);\r\n          resetForm()\r\n          dispatch(updateProfileInitiate(userId,values)) \r\n          await dispatch(loadProfileInitiate(userId,token))\r\n          \r\n        },\r\n      });\r\n\r\n    return (\r\n        <>\r\n            <Controls.Grid container justifyContent=\"center\" mt={{xs:5,sm:0}}>\r\n                <Controls.Grid item xs={12} sx={{ backgroundColor: \"white\", boxShadow: \"0px 4px 6px rgba(0, 0, 0, 0.1)\", height: \"auto\" }} p={{xs:2}}>\r\n                    <Controls.Grid item sx={{ textAlign: \"center\" }}>\r\n                        <Controls.Typography variant='caption1' sx={{ fontSize: {xs:\"25px\",sm:\"35px\"}, color: \"#333333\" }}>Personal Information</Controls.Typography>\r\n                    </Controls.Grid>\r\n                    <Controls.Grid item sx={{ textAlign: \"center\" }}>\r\n                        <Controls.Typography variant='caption1' sx={{ fontSize: {xs:\"12px\",sm:\"14px\"}, color: \"#333333\" }}>Hey there! Fill in your details for a personalized AJIO shopping experience.</Controls.Typography>\r\n                    </Controls.Grid>\r\n\r\n\r\n                    <form onSubmit={formik.handleSubmit}>\r\n                        <Controls.Grid item px={{xs:1   ,lg:20}} py={{xs:2,sm:5}}>\r\n                           \r\n                            <Controls.Grid item xs={12} mb={2}>\r\n                                <Controls.Typography variant=\"caption1\" sx={{ fontSize: \"12px\" }}>\r\n                                    First name *\r\n                                </Controls.Typography>\r\n                                <Controls.TextField\r\n                                    id=\"fname\"\r\n                                    type=\"text\"\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"fname\"\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.fname}\r\n                                />\r\n                                {formik.touched.fname && formik.errors.fname && (\r\n                                    <div style={{ color: \"red\", fontSize: \"10px\" }}>{formik.errors.fname}</div>\r\n                                )}\r\n                            </Controls.Grid>\r\n \r\n                            <Controls.Grid item xs={12} mb={2}>\r\n                                <Controls.Typography variant=\"caption1\" sx={{ fontSize: \"12px\" }}>\r\n                                    Last name *\r\n                                </Controls.Typography>\r\n                                <Controls.TextField\r\n                                    id=\"lname\"\r\n                                    type=\"text\"\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"lname\"\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.lname}\r\n                                />\r\n                                {formik.touched.lname && formik.errors.lname && (\r\n                                    <div style={{ color: \"red\", fontSize: \"10px\" }}>{formik.errors.lname}</div>\r\n                                )}\r\n                            </Controls.Grid>\r\n \r\n                            <Controls.Grid item xs={12} mb={2}>\r\n                                <Controls.Typography variant=\"caption1\" sx={{ fontSize: \"12px\" }}>\r\n                                    Screen Name *\r\n                                </Controls.Typography>\r\n                                <Controls.TextField\r\n                                    id=\"sname\"\r\n                                    type=\"text\"\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"sname\"\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.sname}\r\n                                />\r\n                                {formik.touched.sname && formik.errors.sname && (\r\n                                    <div style={{ color: \"red\", fontSize: \"10px\" }}>{formik.errors.sname}</div>\r\n                                )}\r\n                            </Controls.Grid>\r\n \r\n                            <Controls.Grid item xs={12} mb={2}>\r\n                                <Controls.Typography variant=\"caption1\" sx={{ fontSize: \"12px\" }}>\r\n                                    Email Address *\r\n                                </Controls.Typography>\r\n                                <Controls.TextField\r\n                                    id=\"email\"\r\n                                    type=\"email\"\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"email\"\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.email}\r\n                                />\r\n                                {formik.touched.email && formik.errors.email && (\r\n                                    <div style={{ color: \"red\", fontSize: \"10px\" }}>{formik.errors.email}</div>\r\n                                )}\r\n                            </Controls.Grid>\r\n\r\n\r\n                            <Controls.Grid item xs={12} mb={2}>\r\n                                <Controls.Typography variant=\"caption1\" sx={{ fontSize: \"12px\" }}>\r\n                                    Date of Birth *\r\n                                </Controls.Typography>\r\n                                <Controls.TextField\r\n                                    id=\"dob\"\r\n                                    type=\"date\"\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"dob\"\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.dob}\r\n                                    InputLabelProps={{\r\n                                        shrink: true,\r\n                                        style: { fontFamily: \"SourceSansPro\" },\r\n                                    }}\r\n                                    inputProps={{\r\n                                        max: new Date().toISOString().split(\"T\")[0] \r\n                                    }}\r\n                                />\r\n                                {formik.touched.dob && formik.errors.dob && (\r\n                                    <div style={{ color: \"red\", fontSize: \"10px\" }}>{formik.errors.dob}</div>\r\n                                )}\r\n                            </Controls.Grid>\r\n\r\n                            <Controls.Grid item sx={{ display: \"flex\" }}>\r\n                                <Controls.FormControl sx={{ display: \"flex\", flexDirection: \"row\", alignItems: \"center\" }}>\r\n                                    <Controls.FormLabel\r\n                                        id=\"demo-radio-buttons-group-label\"\r\n                                        sx={{ marginRight: 2 }}\r\n\r\n                                        value={formik.values.gender}\r\n                                        onChange={formik.handleChange}\r\n                                    >\r\n                                        Gender\r\n                                    </Controls.FormLabel>\r\n                                    <Controls.RadioGroup\r\n                                        aria-labelledby=\"demo-radio-buttons-group-label\"\r\n                                        defaultValue=\"female\"\r\n                                        name=\"radio-buttons-group\"\r\n                                        row\r\n                                    >\r\n                                        <Controls.FormControlLabel value=\"female\" sx={{ fontSize: \"10px\" }} control={<Controls.Radio sx={{ '& .MuiSvgIcon-root': { color: \"#866528\", fontSize: \"medium\" }, }} />} label=\"Female\" />\r\n                                        <Controls.FormControlLabel value=\"male\" control={<Controls.Radio sx={{ '& .MuiSvgIcon-root': { color: \"#866528\", fontSize: \"medium\" } }} />} label=\"Male\" />\r\n                                    </Controls.RadioGroup>\r\n                                </Controls.FormControl>\r\n                            </Controls.Grid>\r\n \r\n                            <Controls.Grid item xs={12} mb={2}>\r\n                                <Controls.Typography variant=\"caption1\" sx={{ fontSize: \"12px\" }}>\r\n                                    Telephone +91 *\r\n                                </Controls.Typography>\r\n                                <Controls.TextField\r\n                                    id=\"number\"\r\n                                    type=\"text\"\r\n                                    variant=\"standard\"\r\n                                    fullWidth\r\n                                    name=\"number\"\r\n                                    onChange={formik.handleChange}\r\n                                    onBlur={formik.handleBlur}\r\n                                    value={formik.values.number}\r\n                                />\r\n                                {formik.touched.number && formik.errors.number && (\r\n                                    <div style={{ color: \"red\", fontSize: \"10px\" }}>{formik.errors.number}</div>\r\n                                )}\r\n                            </Controls.Grid>\r\n\r\n                            <Controls.Grid item sx={{ display: \"flex\", justifyContent: \"center\" }} gap={2} xs={12}>\r\n                                <Controls.Button\r\n                                    type=\"button\"\r\n                                    variant=\"contained\"\r\n                                    sx={{ color: \"black\", backgroundColor: \"lightgray\", paddingX: \"60px\", paddingY: 1 }}\r\n                                    onClick={() => formik.resetForm()}\r\n                                >\r\n                                    RESTORE\r\n                                </Controls.Button>\r\n                                <Controls.Button\r\n                                    type=\"submit\"\r\n                                    variant=\"contained\"\r\n                                    sx={{\r\n                                        color: \"white\",\r\n                                        backgroundColor: formik.isSubmitting ? \"gray\" : \"#866528\",\r\n                                        paddingX: \"60px\",\r\n                                        paddingY: 1,\r\n                                    }}\r\n                                    disabled={formik.isSubmitting} \r\n                                >\r\n                                    {formik.isSubmitting ? \"Submitting...\" : \"UPDATE\"}\r\n                                </Controls.Button>\r\n\r\n                            </Controls.Grid>\r\n                        </Controls.Grid>\r\n                    </form>\r\n\r\n                </Controls.Grid>\r\n            </Controls.Grid>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MyProfileDetailsComponent"],"names":["api","API","loadProfileInitiate","userId","token","async","dispatch","type","types","loadProfiledata","Promise","resolve","reject","get","concat","error","console","loadProfileApi","data","payload","err","log","toast","updateProfileInitiate","values","updateProfiledata","put","updateProfileApi","MyProfileDetailsComponent","useDispatch","userData","useSelector","state","loadprofile","updatedUser","updateprofile","getUserId","getToken","useEffect","details","setDetails","useState","fname","lname","sname","email","dob","gender","number","_userData$data","User","user","firstName","lastName","name","split","phoneNumber","prevDetails","_objectSpread","formik","useFormik","enableReinitialize","initialValues","validationSchema","Yup","required","matches","onSubmit","_ref","resetForm","_jsx","_Fragment","children","Controls","Grid","container","justifyContent","mt","xs","sm","_jsxs","item","sx","backgroundColor","boxShadow","height","p","textAlign","Typography","variant","fontSize","color","handleSubmit","px","lg","py","mb","TextField","id","fullWidth","onChange","handleChange","onBlur","handleBlur","value","touched","errors","style","InputLabelProps","shrink","fontFamily","inputProps","max","Date","toISOString","display","FormControl","flexDirection","alignItems","FormLabel","marginRight","RadioGroup","defaultValue","row","FormControlLabel","control","Radio","label","gap","Button","paddingX","paddingY","onClick","isSubmitting","disabled"],"sourceRoot":""}